/*
         __     _    _
 _   _  / _|   | |_ (_) _ __ ___    ___  _ __
| | | || |_    | __|| || '_ ` _ \  / _ \| '__|
| |_| ||  _| _ | |_ | || | | | | ||  __/| |
 \__,_||_|  (_) \__||_||_| |_| |_| \___||_|

The source code `uf.timer.tlpp` is based on a more detailed and feature-rich
source code, `dna.tech.timer.tlpp`, and implements part of the functionalities
present in the latter.

*/

#include "totvs.ch"
#include "parmtype.ch"
#include "tlpp-core.th"

namespace uf
using namespace uf

static __oHMTTimer:=tHashMap():New() as object

class Timer

    static method TimerSleep(nSleep as numeric,nWaits as numeric,bConfirmWait as codeblock) as logical

    static method Activate(nInterval as numeric,bAction as codeblock,oDlg as object,cID as character) as object
    static method DeActivate(cID as character) as logical
    static method DeActivateAll() as logical
    static method Clean() as logical

end class

static method TimerSleep(nSleep,nWaits,bConfirmWait) class timer

    local lConfirmWait:=.F. as logical

    local nWait:=0 as numeric

    paramtype 1 var nSleep as numeric optional default 1000
    paramtype 2 var nWaits as numeric optional default 15
    paramtype 3 var bConfirmWait as block optional default {||.F.}

    while (((!KillApp()).and.(++nWait)<nWaits))
        //Aguarda nSleep milisegundos de no maximo nWaits
        Sleep(nSleep)
        lConfirmWait:=Eval(bConfirmWait)
        if (lConfirmWait)
            exit
        endif
    end while

return(lConfirmWait)

static method Activate(nInterval,bAction,oDlg,cID) class Timer

    local lTTimer as logical

    local oTTimer as object

    paramtype 1 var nInterval as numeric optional default 1000
    paramtype 2 var bAction as block optional default {||.T.}
    paramtype 3 var oDlg as object optional default GetWndDefault()
    paramtype 4 var cID as character optional default UUIDRandom()

    lTTimer:=((valType(__oHMTTimer)=="O").and.(__oHMTTimer:Get(cID,@oTTimer)).and.(ValType(oTTimer)=="O"))
    if (!lTTimer)
        oTTimer:=TTimer():New(nInterval,bAction,oDlg)
        if (valType(__oHMTTimer)!="O")
            __oHMTTimer:=tHashMap():New()
        endif
        __oHMTTimer:Set(cID,oTTimer)
    endif

    if (lTTimer)
        oTTimer:DeActivate()
    endif

    oTTimer:bAction:=bAction

    oTTimer:Activate()

return(oTTimer)

static method DeActivate(cID) class Timer

    local lTTimer as logical

    local oTTimer as object

    paramtype cID as character

    lTTimer:=(valType(__oHMTTimer)=="O")
    if (lTTimer)
        lTTimer:=((__oHMTTimer:Get(cID,@oTTimer)).and.(ValType(oTTimer)=="O"))
        if (lTTimer)
            oTTimer:DeActivate()
        endif
    endif

return(lTTimer)

static method DeActivateAll() class Timer

    local aTTimers as array

    local cID as character

    local lTTimer:=.T. as logical

    local nTTime,nTTimers as numeric

    lTTimer:=(valType(__oHMTTimer)=="O")

    if (lTTimer)

        __oHMTTimer:List(@aTTimers)

        nTTimers:=Len(aTTimers)
        for nTTime:=1 to nTTimers
            cID:=aTTimers[nTTime][1]
            lTTimer:=((lTTimer).and.(Timer():DeActivate(cID)))
        next nTTime

    endif

return(lTTimer)

static method Clean() class Timer

    local aTTimers as array

    local cID as character

    local lTTimer:=.T. as logical

    local nTTime,nTTimers as numeric

    local oTTimer as object

    lTTimer:=(valType(__oHMTTimer)=="O")

    if (lTTimer)

        __oHMTTimer:List(@aTTimers)

        nTTimers:=Len(aTTimers)
        for nTTime:=1 to nTTimers
            cID:=aTTimers[nTTime][1]
            oTTimer:=aTTimers[nTTime][2]
            Timer():DeActivate(cID)
            FreeObj(@oTTimer)
            __oHMTTimer:Del(cID)
        next nTTime

        __oHMTTimer:Clean()

    endif

    DelClassIntF()

return(lTTimer)
