/*
         __     _                  _
 _   _  / _|   | |_   ___    ___  | | ___
| | | || |_    | __| / _ \  / _ \ | |/ __|
| |_| ||  _| _ | |_ | (_) || (_) || |\__ \
 \__,_||_|  (_) \__| \___/  \___/ |_||___/


    The source code `uf.tools.tlpp` is based on a more detailed and feature-rich
    source code, `dna.tech.ctools.tlpp` and `others`, and implements part of the functionalities
    present in both.

*/
#include "totvs.ch"
#include "parmtype.ch"

namespace uf
using namespace uf

class UFTools

    static method RetPictVal(nVal as numeric,lDecZero as logical,nInt as numeric,nDec as numeric,lPictSepMil as logical) as character
    static method TextRuler(cText as character,lStep10 as logical) as character

    static method StrTokArray(cString as character,cToken as character,bEvalToken as codeblock,aStrTokArr as array) as array
    static method StrTokCount(cString as character,cToken as character,bEvalToken as codeblock) as numeric
    static method StrTokCountArray(cString as character,cToken as character,bEvalToken as codeblock) as array

    static method GetAutoGRLog(lKeepErrors as logical,lSanitization as logical) as array

    static method SetBlindMode(lSetBlind as logical) as logical

end class

static method RetPictVal(nVal,lDecZero,nInt,nDec,lPictSepMil) class UFTools
    return(cTools():RetPictVal(@nVal,@lDecZero,@nInt,@nDec,@lPictSepMil))

static method TextRuler(cText,lStep10) class UFTools
    return(cTools():TextRuler(@cText,@lStep10))

static method StrTokArray(cString,cToken,bEvalToken,aStrTokArr) class UFTools
    return(cTools():StrTokArray(@cString,@cToken,@bEvalToken,@aStrTokArr))

static method StrTokCount(cString,cToken,bEvalToken) class UFTools
    return(cTools():StrTokCount(@cString,@cToken,@bEvalToken))

static method StrTokCountArray(cString,cToken,bEvalToken) class UFTools
    return(cTools():StrTokCountArray(@cString,@cToken,@bEvalToken))

static method GetAutoGRLog(lKeepErrors,lSanitization) class UFTools
    local __aErrAuto as array
    local aErrorLog:=aClone(GetAutoGRLog()) as array
    local cError as character
    local nError,nErrors as numeric
    paramtype 1 var lKeepErrors as logical optional default .T.
    paramtype 2 var lSanitization as logical optional default .T.
    if (lKeepErrors)
        //Warning: __aErrAuto é um "Ponteiro" para __aErrAuto de VarAutoLog. Não limpar
        __aErrAuto:=VarAutoLog()
        if (!lSanitization)
            aEval(aErrorLog,{|e|aAdd(__aErrAuto,e)})
        else
            nErrors:=Len(aErrorLog)
            for nError:=1 to nErrors
                cError:=aErrorLog[nError]
                if (aScan(__aErrAuto,{|e|(e==cError)})==0)
                    aAdd(__aErrAuto,cError)
                endif
            next nError
        endif
    endif
return(aErrorLog)

static method SetBlindMode(lSetBlind) class UFTools
return(Blind():SetBlindMode(@lSetBlind))
