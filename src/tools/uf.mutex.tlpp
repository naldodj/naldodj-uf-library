/*
         __                       _
 _   _  / _|    _ __ ___   _   _ | |_   ___ __  __
| | | || |_    | '_ ` _ \ | | | || __| / _ \\ \/ /
| |_| ||  _| _ | | | | | || |_| || |_ |  __/ >  <
 \__,_||_|  (_)|_| |_| |_| \__,_| \__| \___|/_/\_\

 The source code `uf.mutex.tlpp` is based on a more detailed and feature-rich
source code, `dna.tech.mutex.tlpp`, and implements part of the functionalities
present in the latter.

*/

#include "totvs.ch"
#include "fileio.ch"
#include "parmtype.ch"

namespace uf
using namespace uf

#define MUTEX_INTERNAL_LOCK "MUTEX_INTERNAL_LOCK_"

static oHMMutex:=tHashMap():New() as object

class Mutex

    static method Lock(cMutexID as character,cMutexStack as character,nHDLMutex as numeric,nError as numeric,lShared as logical,lEraseFileLock as logical) as logical
    static method UnLock(cMutexID as character,cMutexStack as character,lEraseFileLock as logical) as logical
    static method Exists(cMutexID as character,cMutexStack as character) as logical
    static method Write(cMutexID as character,cMutexStack as character,cBuffer as character,nBuffer as numeric) as logical
    static method ReadStr(cMutexID as character,cMutexStack as character,nBytes as numeric) as character
    static method Clean(cMutexStack as character,lEraseFileLock as logical) as variant

    static method LockByFile(cHDLMutex as character,nHDLMutex as numeric,nSleep as numeric,nAttempts as numeric,cMutexStack as character,nError as numeric,lShared as logical) as logical
    static method UnLockByFile(cHDLMutex as character,nHDLMutex as numeric,cMutexStack as character,lEraseFileLock as logical) as logical

end class

static method Lock(cMutexID,cMutexStack,nHDLMutex,nError,lShared,lEraseFileLock) class Mutex
    local cIDMutex as character
    local lLock:=.F. as logical
    local lHasMutex as logical
    local oFWThreadSemaphore as object
    local oFWThreadSemaphoreLock as object
    paramtype 1 var cMutexID as character
    paramtype 2 var cMutexStack as character optional default "_"
    paramtype 3 var nHDLMutex as numeric optional default (-1)
    paramtype 4 var nError as numeric optional default 0
    paramtype 5 var lShared as logical optional default .F.
    paramtype 6 var lEraseFileLock as logical optional default .T.
    cIDMutex:=GetIDMutex(cMutexID,cMutexStack)
    oFWThreadSemaphoreLock:=FWThreadSemaphore():New()
    oFWThreadSemaphoreLock:SetID(MUTEX_INTERNAL_LOCK+cIDMutex)
    lLock:=oFWThreadSemaphoreLock:Open(.F.)
    if (lLock)
        lHasMutex:=oHMMutex:Get(cIDMutex,@oFWThreadSemaphore)
        if (!lHasMutex)
            oFWThreadSemaphore:=FWThreadSemaphore():New()
            oFWThreadSemaphore:SetID(cIDMutex)
            lHasMutex:=oFWThreadSemaphore:Exist()
            if ((lHasMutex).and.(lEraseFileLock))
                lHasMutex:=(oFWThreadSemaphore:Erase()==(-1))
            endif
            oHMMutex:Set(cIDMutex,@oFWThreadSemaphore)
            lLock:=oFWThreadSemaphore:Open(((!lHasMutex).and.(lShared)))
        else
            lHasMutex:=oFWThreadSemaphore:Exist()
            if ((lHasMutex).and.(lEraseFileLock))
                lHasMutex:=(oFWThreadSemaphore:Erase()==(-1))
            endif
            lLock:=oFWThreadSemaphore:Open(((!lHasMutex).and.(lShared)))
        endif
        nHDLMutex:=oFWThreadSemaphore:nLCKFile
        nError:=oFWThreadSemaphore:nError
    else
        nHDLMutex:=oFWThreadSemaphoreLock:nLCKFile
        nError:=oFWThreadSemaphoreLock:nError
    endif
    oFWThreadSemaphoreLock:Close()
    oFWThreadSemaphoreLock:Erase()
    FreeObj(@oFWThreadSemaphoreLock)
return(lLock)

static method UnLock(cMutexID,cMutexStack,lEraseFileLock) class Mutex
    local cIDMutex as character
    local lUnLock:=.F. as logical
    local lHasMutex as logical
    local oFWThreadSemaphore as object
    paramtype 1 var cMutexID as character
    paramtype 2 var cMutexStack as character optional default "_"
    paramtype 3 var lEraseFileLock as logical optional default .T.
    cIDMutex:=GetIDMutex(cMutexID,cMutexStack)
    lHasMutex:=oHMMutex:Get(cIDMutex,@oFWThreadSemaphore)
    if (lHasMutex)
        oFWThreadSemaphore:Close()
        if (lEraseFileLock)
            oFWThreadSemaphore:Erase()
        endif
        lUnLock:=(!oFWThreadSemaphore:Exist())
    endif
    if ((lHasMutex).and.(lUnLock))
        FreeObj(@oFWThreadSemaphore)
        oHMMutex:Del(cIDMutex)
    endif
return(lUnLock)

static method Exists(cMutexID,cMutexStack) class Mutex
    local cIDMutex as character
    local lHasMutex as logical
    local oFWThreadSemaphore as object
    paramtype 1 var cMutexID as character
    paramtype 2 var cMutexStack as character optional default "_"
    cIDMutex:=GetIDMutex(cMutexID,cMutexStack)
    oFWThreadSemaphore:=FWThreadSemaphore():New()
    oFWThreadSemaphore:SetID(cIDMutex)
    lHasMutex:=oFWThreadSemaphore:Exist()
    FreeObj(@oFWThreadSemaphore)
return(lHasMutex)

static method Write(cMutexID,cMutexStack,cBuffer,nBuffer) class Mutex
    local cIDMutex as character
    local lWrited:=.F. as logical
    local lHasMutex as logical
    local nAttempt,nAttempts as numeric
    local oFWThreadSemaphore as object
    local oFWThreadSemaphoreLock as object
    paramtype 1 var cMutexID as character
    paramtype 2 var cMutexStack as character optional default "_"
    paramtype 3 var cBuffer as character optional default ""
    paramtype 4 var nBuffer as numeric optional default Len(cBuffer)
    cIDMutex:=GetIDMutex(cMutexID,cMutexStack)
    oFWThreadSemaphoreLock:=FWThreadSemaphore():New()
    oFWThreadSemaphoreLock:SetID(MUTEX_INTERNAL_LOCK+cIDMutex)
    nAttempt=0
    nAttempts:=50
    while (!(lHasMutex:=oFWThreadSemaphoreLock:Open(.F.)))
        if (++nAttempt>nAttempts)
            exit
        endif
        Sleep(100)
    end while
    if (lHasMutex)
        oFWThreadSemaphore:=FWThreadSemaphore():New()
        oFWThreadSemaphore:SetID(cIDMutex)
        lHasMutex:=oFWThreadSemaphore:Exist()
        if (lHasMutex)
            lWrited:=oFWThreadSemaphore:Open(.T./*lShared*/)
            lWrited:=((lWrited).and.oFWThreadSemaphore:nLCKFile!=(-1))
            lWrited:=((lWrited).and.(oFWThreadSemaphore:nError==0))
            if (lWrited)
                oFWThreadSemaphore:Seek(0,FS_END)
                oFWThreadSemaphore:Write(cBuffer,nBuffer)
                oFWThreadSemaphore:Close()
            endif
        endif
        FreeObj(@oFWThreadSemaphore)
    endif
    oFWThreadSemaphoreLock:Close()
    oFWThreadSemaphoreLock:Erase()
    FreeObj(@oFWThreadSemaphoreLock)
return(lWrited)

static method ReadStr(cMutexID,cMutexStack,nBytes) class Mutex
    local cIDMutex as character
    local cReadStr:="" as character
    local lHasMutex as logical
    local nAttempt,nAttempts as numeric
    local oFWThreadSemaphore as object
    local oFWThreadSemaphoreLock as object
    paramtype 1 var cMutexID as character
    paramtype 2 var cMutexStack as character optional default "_"
    paramtype 4 var nBytes as numeric optional default 0
    cIDMutex:=GetIDMutex(cMutexID,cMutexStack)
    oFWThreadSemaphoreLock:=FWThreadSemaphore():New()
    oFWThreadSemaphoreLock:SetID(MUTEX_INTERNAL_LOCK+cIDMutex)
    nAttempt=0
    nAttempts:=50
    while (!(lHasMutex:=oFWThreadSemaphoreLock:Open(.F.)))
        if (++nAttempt>nAttempts)
            exit
        endif
        Sleep(100)
    end while
    if (lHasMutex)
        oFWThreadSemaphore:=FWThreadSemaphore():New()
        oFWThreadSemaphore:SetID(cIDMutex)
        lHasMutex:=oFWThreadSemaphore:Exist()
        if (lHasMutex)
            lHasMutex:=oFWThreadSemaphore:Open(.T./*lShared*/)
            lHasMutex:=((lHasMutex).and.oFWThreadSemaphore:nLCKFile!=(-1))
            lHasMutex:=((lHasMutex).and.(oFWThreadSemaphore:nError==0))
            if (lHasMutex)
                if (nBytes==0)
                    nBytes:=fSeek(oFWThreadSemaphore:nLCKFile,0,FS_END)
                    oFWThreadSemaphore:Seek(0,FS_SET)
                endif
                cReadStr+=oFWThreadSemaphore:ReadStr(nBytes)
                oFWThreadSemaphore:Close()
            endif
        endif
        FreeObj(@oFWThreadSemaphore)
    endif
    oFWThreadSemaphoreLock:Close()
    oFWThreadSemaphoreLock:Erase()
    FreeObj(@oFWThreadSemaphoreLock)
return(cReadStr)

static method Clean(cMutexStack,lEraseFileLock) class Mutex

    local aSemaphores as array

    local cIDMutex as character

    local nSemaphore,nSemaphores,nMutexStack as numeric

    paramtype 1 var cMutexStack as character optional default "_"
    paramtype 2 var lEraseFileLock as logical optional default .T.

    oHMMutex:List(@aSemaphores)

    nSemaphores:=Len(aSemaphores)
    for nSemaphore:=1 to nSemaphores
        cIDMutex:=aSemaphores[nSemaphore][1]
        nMutexStack:=Len(cMutexStack)
        if (left(cIDMutex,nMutexStack)==cMutexStack)
            cIDMutex:=SubStr(cIDMutex,nMutexStack+1)
            Mutex():UnLock(cIDMutex,cMutexStack,lEraseFileLock)
        endif
    next nSemaphore

    nSemaphores:=Len(aSemaphores)
    if ((nSemaphores==0).or.(cMutexStack=="_"))
        oHMMutex:Clean()
    endif

return(nil)

method LockByFile(cHDLMutex,nHDLMutex,nSleep,nAttempts,cMutexStack,nError,lShared) class Mutex

    local lMutex:=.F. as logical
    local lCreate as logical

    local nAttempt:=0 as numeric

    paramtype 1 var cHDLMutex as character
    paramtype 2 var nHDLMutex as numeric optional default (-1)
    paramtype 3 var nSleep as numeric optional default 500
    paramtype 4 var nAttempts as numeric optional default 50
    paramtype 5 var cMutexStack as character optional default "_"
    paramtype 6 var nError as numeric optional default 0
    paramtype 7 var lShared as logical optional default .F.

    lCreate:=(nHDLMutex==(-1))
    if (!lCreate)
        fSeek(nHDLMutex,0,0)
        lCreate:=(fError()!=0)
        fClose(nHDLMutex)
        if (lCreate)
            nHDLMutex:=(-1)
        endif
    endif

    cHDLMutex:=lower(cHDLMutex)

    if (lCreate)
        while ((!KillApp()).and.(!lMutex).and.(nAttempt<=nAttempts))
            lMutex:=Timer():TimerSleep(nSleep,15,{||__MyMutexLock(@cHDLMutex,@cMutexStack,@nHDLMutex,@nError,@lShared)})
            if (lMutex)
                exit
            endif
            nAttempt++
        end while
    else
        if (Mutex():UnLockByFile(@cHDLMutex,@nHDLMutex,@cMutexStack))
            nHDLMutex:=(-1)
        endif
    endif

    lMutex:=(nHDLMutex>=0)

return(lMutex)

static function __MyMutexLock(cHDLMutex as character,cMutexStack as character,nHDLMutex as numeric,nError as numeric,lShared as logical)
return(Mutex():Lock(@cHDLMutex,@cMutexStack,@nHDLMutex,@nError,@lShared))

method UnLockByFile(cHDLMutex,nHDLMutex,cMutexStack,lEraseFileLock) class Mutex
    local lUnLock as logical
    paramtype 1 var cHDLMutex as character
    paramtype 2 var nHDLMutex as numeric optional default (-1)
    paramtype 3 var cMutexStack as character optional default "_"
    paramtype 4 var lEraseFileLock as logical optional default .T.
    cHDLMutex:=lower(cHDLMutex)
    lUnLock:=(nHDLMutex!=(-1))
    if (lUnLock)
        lUnLock:=Mutex():UnLock(@cHDLMutex,@cMutexStack,@lEraseFileLock)
        fClose(nHDLMutex)
        nHDLMutex:=(-1)
    elseif (nHDLMutex>=0)
        fSeek(nHDLMutex,0,0)
        lUnLock:=(fError()!=0)
        fClose(nHDLMutex)
        nHDLMutex:=(-1)
    endif
return(lUnLock)

static function GetIDMutex(cMutexID as character,cMutexStack as character) as character
    local cIDMutex as character
    cIDMutex:=cMutexStack
    cIDMutex+=if((cMutexStack!="_"),"_","")
    cIDMutex+=cMutexID
return(cIDMutex)
