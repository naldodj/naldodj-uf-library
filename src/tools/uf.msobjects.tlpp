/*----------------------------------------------------------------------
                        _        _              _
 _ __ ___   ___   ___  | |__    (_)  ___   ___ | |_  ___
| '_ ` _ \ / __| / _ \ | '_ \   | | / _ \ / __|| __|/ __|
| | | | | |\__ \| (_) || |_) |  | ||  __/| (__ | |_ \__ \
|_| |_| |_||___/ \___/ |_.__/  _/ | \___| \___| \__||___/
                              |__/

    The source code `uf.msobjects.tlpp` is based on a more detailed and feature-rich
    source code, `dna.tech.msobjects.tlpp` and implements part of the functionalities
    present in the latter.

*/

#include "totvs.ch"
#include "parmtype.ch"
#include "tlpp-core.th"

namespace uf
using namespace uf

class MsObjects

    static method FindMsObjects(cMsClassName as character,oWnd as object) as array
    static method FindMsObjectsClassName(oWnd as object)
    static method GetOctlFocus(oWnd as object) as object

end class

//------------------------------------------------------------------------------------------------
    /*/
        Funcao:FindMsObjects
        Autor:Marinaldo de Jesus
        Data:17/04/2011
        Uso:Retornar Array com os Objetos conforme cMsClassName
        Sintaxe:MsObjects():FindMsObjects(cMsClassName,oWnd)
    /*/
//------------------------------------------------------------------------------------------------
static method FindMsObjects(cMsClassName,oWnd) CLASS MsObjects
    local aMsObjects as array
    paramtype 1 var cMsClassName as character
    paramtype 2 var oWnd as object optional default GetWndDefault()
    aMsObjects:=FindMsObjects(@cMsClassName,@oWnd)
    return(aMsObjects)

//------------------------------------------------------------------------------------------------
    /*/
        Funcao:FindMsObjectsClassName
        Autor:Marinaldo de Jesus
        Data:17/04/2011
        Uso:Retornar Array com as Classes dos Objetos utilizados
        Sintaxe:MsObjects():FindMsObjectsClassName(oWnd)
    /*/
//------------------------------------------------------------------------------------------------
static method FindMsObjectsClassName(oWnd) CLASS MsObjects
    local aMsObjects as array
    local lOnlyFindClassName:=.T. as logical
    paramtype 1 var oWnd as object optional default GetWndDefault()
    aMsObjects:=FindMsObjects("GETCLASSNAME",@oWnd,lOnlyFindClassName)
    return(aMsObjects)
static function FindMsObjects(cMsClassName as character,oWnd as object,lOnlyFindClassName as logical) as array

    local aMsObjects:=array(0) as array

    local bError as codeblock
    local bErrorBlock as codeblock

    bError:={|e|break(e)}
    bErrorBlock:=ErrorBlock(bError)
    begin sequence

        dfv():Default(@oWnd,GetWndDefault())

        if (!(ValType(oWnd)=="O"))
            break
        endif

        if (!(ValType(cMsClassName)=="C"))
            break
        endif

        cMsClassName:=Upper(cMsClassName)
        aMsObjects:=FindObject(@oWnd,@cMsClassName,@aMsObjects,@lOnlyFindClassName)
        AddObj(@oWnd,@cMsClassName,@aMsObjects)

    end sequence
    ErrorBlock(bErrorBlock)

    return(aMsObjects)

//------------------------------------------------------------------------------------------------
    /*/
        Funcao:FindObject
        Autor:Marinaldo de Jesus
        Data:17/04/2011
        Uso:Retornar Array com os Objetos conforme cMsClassName
    /*/
//------------------------------------------------------------------------------------------------
static function FindObject(oWnd as object,cMsClassName as character,aMsObjects as array,lOnlyFindClassName as logical) as array

    local aChild as array
    local aControls as array

    local bError as codeblock
    local bErrorBlock as codeblock

    local nChild as numeric
    local nChilds as numeric
    local nControl as numeric
    local nControls as numeric

    local oChild as object

    dfv():Default(@aMsObjects,array(0))
    dfv():Default(@lOnlyFindClassName,.F.)

    BEGIN SEQUENCE

        aControls:=oWnd:aControls

        if (aControls==nil)
            AddObj(@oWnd,@cMsClassName,@aMsObjects,@lOnlyFindClassName)
            oChild:=oWnd:oWnd
            if !(oChild==nil)
                AddObj(@oChild,@cMsClassName,@aMsObjects,@lOnlyFindClassName)
                FindObject(@oChild,@cMsClassName,@aMsObjects,@lOnlyFindClassName)
            endif
            break
        endif

        bError:={|e|break(e)}

        nControls:=Len(aControls)
        For nControl:=1 To nControls
            oChild:=aControls[nControl]
            if (oChild==nil)
                Loop
            endif
            AddObj(@oChild,@cMsClassName,@aMsObjects,@lOnlyFindClassName)
            bErrorBlock:=ErrorBlock(bError)
            begin sequence
                aChild:=oChild:aControls
                if !(aChild==nil)
                    nChilds:=Len(aChild)
                    For nChild:=1 To nChilds
                        oChild:=aChild[nChild]
                        if !(oChild==nil)
                            if (oChild==nil)
                                Loop
                            endif
                            AddObj(@oChild,@cMsClassName,@aMsObjects,@lOnlyFindClassName)
                            FindObject(@oChild,@cMsClassName,@aMsObjects,@lOnlyFindClassName)
                        endif
                    Next nChild
                endif
            end sequence
            ErrorBlock(bErrorBlock)
        Next nControl

        oChild:=oWnd:oWnd
        if !(oChild==nil)
            AddObj(@oChild,@cMsClassName,@aMsObjects,lOnlyFindClassName)
            FindObject(@oChild,@cMsClassName,@aMsObjects,@lOnlyFindClassName)
        endif

    END SEQUENCE

    return(aMsObjects)

//------------------------------------------------------------------------------------------------
    /*/
        Funcao:AddObj
        Autor:Marinaldo de Jesus
        Data:17/04/2011
        Uso:Adicionar o Objeto
    /*/
//------------------------------------------------------------------------------------------------
static function AddObj(oObj as object,cMsClassName as character,aMsObjects as array,lOnlyFindClassName as logical) as logical

    local cClassName as character

    local lAddObj as logical

    dfv():Default(@lOnlyFindClassName,.F.)

    cClassName:=Upper(getClassName(oObj))
    if (!lOnlyFindClassName)
        lAddObj:=(cClassName==cMsClassName)
        if (lAddObj)
            if (lAddObj:=(aScan(aMsObjects,{|oFind|oFind==oObj})==0))
                aAdd(aMsObjects,oObj)
            endif
        endif
    elseif (lAddObj:=(aScan(aMsObjects,{|cClass|cClass==cClassName})==0))
        aAdd(aMsObjects,cClassName)
    endif

    return(lAddObj)

//------------------------------------------------------------------------------------------------
    /*/
        Funcao:GetOctlFocus
        Autor:Marinaldo de Jesus
        Data:26/06/2011
        Uso:Retorna o Objeto Ativo
        Sintaxe:MsObjects():GetOctlFocus(oWnd)
    /*/
//------------------------------------------------------------------------------------------------
static method GetOctlFocus(oWnd) class MsObjects
    paramtype 1 var oWnd as object optional
    return(GetOctlFocus(@oWnd))

static function GetOctlFocus(oWnd)

    local bError as codeblock
    local bErrorBlock as codeblock

    local oCtlFocus as object

    bError:={|e|break(e)}
    bErrorBlock:=ErrorBlock(bError)
    begin sequence

        dfv():Default(@oWnd,GetWndDefault())

        if (!(ValType(oWnd)=="O"))
            break
        endif

        oCtlFocus:=oWnd:oCtlFocus

    end sequence
    ErrorBlock(bErrorBlock)

    return(oCtlFocus)
