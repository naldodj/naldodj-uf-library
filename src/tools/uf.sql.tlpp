/*
         __                 _     _    _
 _   _  / _|    ___   __ _ | |   | |_ | | _ __   _ __
| | | || |_    / __| / _` || |   | __|| || '_ \ | '_ \
| |_| ||  _| _ \__ \| (_| || | _ | |_ | || |_) || |_) |
 \__,_||_|  (_)|___/ \__, ||_|(_) \__||_|| .__/ | .__/
                        |_|              |_|    |_|

*/

#include "parmtype.ch"
#include "tlpp-core.th"

namespace uf
using namespace uf

class SQL

    static method SQLFormat(cQuery as character) as character

end class

static method SQLFormat(cQuery) class SQL

    local cSQLFormat as character

    local jSQLFormat as json

    paramtype 1 var cQuery as character

    cSQLFormat:=cQuery
    cSQLFormat:=strTran(strTran(cSQLFormat,chr(13)," "),chr(10)," ")
    cSQLFormat:=URL():Encode(cSQLFormat)
    cSQLFormat:=HttpPost("https://sqlformat.org/api/v1/format","","reindent=1&identifier_case=upper&keyword_case=upper&indent_width=4&sql="+cSQLFormat)
    jSQLFormat:=JSONObject():New()
    if ((empty(jSQLFormat:fromJSON(cSQLFormat))).and.(jSQLFormat:HasProperty("result")))
        cSQLFormat:=jSQLFormat["result"]
    else
        cSQLFormat:=cQuery
    endif

    FreeObj(@jSQLFormat)

return(cSQLFormat)
