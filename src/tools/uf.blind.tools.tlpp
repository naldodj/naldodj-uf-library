/*

         __     _      _  _             _     _                  _
 _   _  / _|   | |__  | |(_) _ __    __| |   | |_   ___    ___  | | ___
| | | || |_    | '_ \ | || || '_ \  / _` |   | __| / _ \  / _ \ | |/ __|
| |_| ||  _| _ | |_) || || || | | || (_| | _ | |_ | (_) || (_) || |\__ \
 \__,_||_|  (_)|_.__/ |_||_||_| |_| \__,_|(_) \__| \___/  \___/ |_||___/


    The source code `uf.blind.tools.tlpp` is based on a more detailed and feature-rich
    source code, `dna.tech.blind.tools.tlpp` and implements part of the functionalities
    present in the latter.

*/

namespace uf
using namespace uf

static s__cInternet
static s__lHelpInDark

#include "set.ch"
#include "totvs.ch"
#include "common.ch"
#include "parmtype.ch"

class Blind
    static method SetBlindMode(lSetBlind as logical) as logical
    static method SaveBlindMode() as variant
    static method RestoreBlindMode() as variant
end class

static method SetBlindMode(lSetBlind) class Blind

    local lIsBlind:=IsBlind() as logical

    paramtype 1 var lSetBlind as logical default lIsBlind

    if (!lSetBlind)
        HelpInDark(!lSetBlind)
        if ((Type("__cInternet")=="C").and.(__cInternet=="AUTOMATICO"))
            __cInternet:=NIL
        endif
    else
        HelpInDark(lSetBlind)
        __cInternet:="AUTOMATICO"
    endif

return(lIsBlind)

static method SaveBlindMode() class Blind

    if (Type("__cInternet")=="C")
        s__cInternet:=__cInternet
    else
        s__cInternet:=NIL
    endif

    s__lHelpInDark:=HelpInDark(.T.)
    HelpInDark(s__lHelpInDark)

return

static method RestoreBlindMode() class Blind

    if (ISCHARACTER(s__cInternet))
        __cInternet:=s__cInternet
    else
        __cInternet:=NIL
    endif

    if (ISLOGICAL(s__lHelpInDark))
        HelpInDark(s__lHelpInDark)
    endif

return
