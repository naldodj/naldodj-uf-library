/*

         __                             _  ____     _
 _   _  / _|     ___ __  __  ___   ___ | ||___ \   (_) ___   ___   _ __
| | | || |_     / _ \\ \/ / / __| / _ \| |  __) |  | |/ __| / _ \ | '_ \
| |_| ||  _| _ |  __/ >  < | (__ |  __/| | / __/   | |\__ \| (_) || | | |
 \__,_||_|  (_) \___|/_/\_\ \___| \___||_||_____| _/ ||___/ \___/ |_| |_|
                                                 |__/

    How to compile PSScript: [WIN-PS2EXE](https://github.com/MScholtes/PS2EXE)

    Source file: C:\GitHub\naldodj-tlpp\tlpp\tools\bin\ps\excel2json.2024.0.1105.1.ps1
    Target file: C:\GitHub\naldodj-tlpp\tlpp\tools\bin\exe\excel2json.2024.0.1105.1.exe
    Icon File: C:\GitHub\naldodj-tlpp\tlpp\tools\bin\ico\excel2json.ico
    Version: 2024.0.1105.1
    File Description: Excel2JSON
    Product Name: Excel2JSON
    CopyRight: DNA Tech
    Supress error output: x

*/

#include "totvs.ch"
#include "shell.ch"
#include "fileio.ch"
#include "dbstruct.ch"
#include "parmtype.ch"

namespace uf
using namespace uf

class Excel2JSON

    static method getVersion() as character
    static method getPSScript() as character
    static method getScriptFileName(lGetBinary as logical) as character
    static method getBinaryFile(cPSExecutableFile,cPSExeFullPathFile) as logical

    static method PSExcel2JSON(cFileInput as character,cFileOutPut as character,cPSPathExcelScripts as character) as logical
    static method CSVFileToJSON(cExcelFile as character,cJSONFile as character,bTmpCustomFields as codeblock,cExcelPathServer as character,cToken as character) as logical

endclass

static method getVersion() class Excel2JSON
    local cPSVersion as character
    /*
        major.minor.build.revision: 2024.0.1105.1
        -----------------------------------------
        + Major => yyyy => 2024
        |
        +-+ Minor => y or yyyy => 0
        |
        +-+ Build => mmdd => 1105
            |
            +-+ Revision => n => 1
    */
    cPSVersion:="2024.0.1105.1"
return(cPSVersion)

static method getPSScript() class Excel2JSON

    static cPSScript as character

    if (empty(cPSScript))
        cPSScript:=HTTPGet("https://raw.githubusercontent.com/naldodj/naldodj-Excel2JSON/main/excel2json.ps1")
    endif

    if (empty(cPSScript))
        //Replace me with the content of the file https://raw.githubusercontent.com/naldodj/naldodj-Excel2JSON/main/excel2json.ps1
        beginContent var cPSScript
<#
    .SYNOPSIS
    Converts an Excel sheet from a workbook to JSON.

    .DESCRIPTION
    To enable parsing of Excel Workbooks efficiently in PowerShell, this script converts a sheet from a spreadsheet into a JSON file with the same structure as the sheet.

    .PARAMETER InputFile
    The Excel Workbook to be converted. Can be FileInfo or a String.

    .PARAMETER OutputFileName
    The path to the JSON file to be created.

    .PARAMETER SheetName
    The name of the sheet from the Excel Workbook to convert. If only one sheet exists, it will convert that one.

    .PARAMETER HeaderRow
    The row number containing the header in the Excel Workbook. If not specified, defaults to the first row.

    .PARAMETER DetailRow
    The row number containing the detail data in the Excel Workbook. If not specified, defaults to the second row.

    .EXAMPLE
    Excel2JSON -InputFile MyExcelWorkbook.xlsx

    .EXAMPLE
    Get-Item MyExcelWorkbook.xlsx | Excel2JSON -OutputFileName MyConvertedFile.json -SheetName Sheet2 -HeaderRow 2 -DetailRow 3

    .NOTES
    Written by: Marinaldo de Jesus

    Find me on:
    * My blog: https://blacktdn.com.br/
    * Github: https://github.com/naldodj
#>

[CmdletBinding()]
Param(

    [Parameter(
        ValueFromPipeline=$true,
        Mandatory=$true
    )]
    [Object]$InputFile,

    [Parameter()]
    [string]$OutputFileName,

    [Parameter()]
    [string]$SheetName,

    [Parameter()]
    [int]$HeaderRow = 1,

    [Parameter()]
    [int]$DetailRow = 2
)

#region prep
# Check what type of file $InputFile is, and update the variable accordingly
if ($InputFile -is "System.IO.FileSystemInfo") {
    $InputFile = $InputFile.FullName.ToString()
}

# Make sure the input file path is fully qualified
$InputFile = [System.IO.Path]::GetFullPath($InputFile)
Write-Verbose "Converting '$InputFile' to JSON"

# If no OutputfileName was specified, make one up
if (-not $OutputFileName) {
    $OutputFileName = [System.IO.Path]::GetFileNameWithoutExtension($(Split-Path $InputFile -Leaf))
    $OutputFileName = Join-Path $pwd ($OutputFileName + ".json")
}

# Make sure the output file path is fully qualified
$OutputFileName = [System.IO.Path]::GetFullPath($OutputFileName)

# Instantiate Excel
$excelApplication = New-Object -ComObject Excel.Application
$excelApplication.DisplayAlerts = $false
$Workbook = $excelApplication.Workbooks.Open($InputFile)

# If SheetName wasn't specified, make sure there's only one sheet
if (-not $SheetName) {
    if ($Workbook.Sheets.Count -eq 1) {
        $SheetName = @($Workbook.Sheets)[0].Name
        Write-Verbose "SheetName was not specified, but only one sheet exists. Converting '$SheetName'"
    } else {
        throw "SheetName was not specified and more than one sheet exists."
    }
} else {
    # If SheetName was specified, make sure the sheet exists
    $worksheet = $Workbook.Sheets | Where-Object {$_.Name -eq $SheetName}
    if (-not $worksheet) {
        throw "Could not locate SheetName '$SheetName' in the workbook"
    }
}

Write-Verbose "Outputting sheet '$SheetName' to '$OutputFileName'"

#endregion prep
# Grab the sheet to work with
$worksheet = $Workbook.Sheets | Where-Object {$_.Name -eq $SheetName}

# Get the range of used cells in the worksheet
$usedRange = $worksheet.UsedRange

# Get headers
$Headers = @{}
$numberOfColumns = $usedRange.Columns.Count
for ($i = 1; $i -le $numberOfColumns; $i++) {
    $cellValue = $usedRange.Cells.Item($HeaderRow, $i).Text.Trim()
    if (-not [string]::IsNullOrWhiteSpace($cellValue)) {
        $Headers.Add($i, $cellValue)
    }
}

# Get data
$data = New-Object System.Collections.ArrayList
$rowCount = $usedRange.Rows.Count
if ($rowCount -gt $HeaderRow) {
    # Get all the values from the spreadsheet at once
    $values = $usedRange.Value2
    for ($rowIndex = $DetailRow; $rowIndex -le $rowCount; $rowIndex++) {
        $rowData = @{}
        foreach ($columnIndex in $Headers.Keys) {
            $columnName = $Headers[$columnIndex]
            $cellValue = $values[$rowIndex, $columnIndex]
            $rowData[$columnName] = $cellValue
        }
        [void]$data.Add($rowData)
    }
}

# Close the Workbook
$Workbook.Close($false)

# Close Excel
$excelApplication.Quit()

# Release COM objects
[System.Runtime.InteropServices.Marshal]::ReleaseComObject($usedRange) | Out-Null
[System.Runtime.InteropServices.Marshal]::ReleaseComObject($worksheet) | Out-Null
[System.Runtime.InteropServices.Marshal]::ReleaseComObject($Workbook) | Out-Null
[System.Runtime.InteropServices.Marshal]::ReleaseComObject($excelApplication) | Out-Null

# Convert to JSON and output to file
$data | ConvertTo-Json | Out-File -Encoding ASCII -FilePath $OutputFileName

# Garbage collection
[System.GC]::Collect()
[System.GC]::WaitForPendingFinalizers()
        endContent
    endif
return(cPSScript)

static method getScriptFileName(lGetBinary) class Excel2JSON
    /*
        major.minor.build.revision: 2024.0.1105.1
        -----------------------------------------
        + Major => yyyy => 2024
        |
        +-+ Minor => y or yyyy => 0
        |
        +-+ Build => mmdd => 1105
            |
            +-+ Revision => n => 1
    */
    local cPSVersion:=Excel2JSON():getVersion() as character
    local cPSSCriptFile as character
    paramtype 1 var lGetBinary as logical optional default .F.
    cPSSCriptFile:="excel2json."+cPSVersion+if(lGetBinary,".exe",".ps1")
return(cPSSCriptFile)

static method getBinaryFile(cPSExecutableFile,cPSExeFullPathFile) class Excel2JSON

    local cPSExecutableFile:=Excel2JSON():getScriptFileName(.T.) as character

    local lGetBinaryFile as logical

    paramtype 1 var cPSExecutableFile as character
    paramtype 2 var cPSExeFullPathFile as character

    lGetBinaryFile:=Resource2File(cPSExecutableFile,cPSExeFullPathFile)
    if (!lGetBinaryFile)
        lGetBinaryFile:=MemoWrite(cPSExeFullPathFile,HTTPGet("https://raw.githubusercontent.com/naldodj/naldodj-Excel2JSON/main/bin/exe/"+cPSExecutableFile))
    endif

return(lGetBinaryFile)

static method PSExcel2JSON(cFileInput,cFileOutPut,cPSPathExcelScripts) class Excel2JSON

    local cPSPolicy as character
    local cPSScript as character
    local cPSCommand as character
    local cPSSCriptFile:=Excel2JSON():getScriptFileName() as character
    local cPSExecutableFile:=Excel2JSON():getScriptFileName(.T.) as character
    local cPSFullPathFile:=(cPSPathExcelScripts+cPSSCriptFile) as character
    local cPSExeFullPathFile:=(cPSPathExcelScripts+cPSExecutableFile) as character
    local cExel2JSONParameters as character

    local lEXL2JON_EN as logical
    local lPSExcel2JSON as logical
    local lPSPathExcelClient:=.F. as logical

    local nWaitRunRet:=(-1) as numeric
    local nShellExecute:=(-1) as numeric

    //Verifica nWaits*1000 a aguardar
    local nWaits:=getNewPar("EXL2JON_MW",15) as numeric
    //Verifica nAttempts para experar a obtencao do arquivo
    local nAttempt:=0,nAttempts:=getNewPar("EXL2JON_MA",51) as numeric

    paramtype 1 var cFileInput as character
    paramtype 2 var cFileOutPut as character
    paramtype 3 var cPSPathExcelScripts as character default "c:\tmp\totvs\excel\scripts\ps\"

    if (!lIsDir(cPSPathExcelScripts))
        dirtools():MakeDir(cPSPathExcelScripts)
    endif

    //Verifica se Vai habilitar o Executavel
    lEXL2JON_EN:=getNewPar("EXL2JON_EN",.T.)
    lPSPathExcelClient:=((lEXL2JON_EN).and.(file(cPSExeFullPathFile)))
    if ((lEXL2JON_EN).and.(!lPSPathExcelClient))
        lPSPathExcelClient:=Excel2JSON():getBinaryFile(cPSExecutableFile,cPSExeFullPathFile)
    endif

    lPSExcel2JSON:=((lEXL2JON_EN).and.(file(cPSExeFullPathFile)))
    if (!lPSExcel2JSON)
        lPSExcel2JSON:=file(cPSFullPathFile)
    else
        cPSFullPathFile:=cPSExeFullPathFile
    endif

    if (!lPSExcel2JSON)
        aEval(directory(cPSPathExcelScripts+"\excel2json*.*"),{|e|fErase(cPSPathExcelScripts+e[1])})
        cPSScript:=Excel2JSON():getPSScript()
        lPSExcel2JSON:=MemoWrite(cPSFullPathFile,cPSScript)
    endif

    if (lPSExcel2JSON)
        cExel2JSONParameters:=" -InputFile "+cFileInput+" -OutputFileName "+cFileOutPut+" -SheetName Clientes -HeaderRow 2 -DetailRow 3"
        if ((lPSPathExcelClient).and.(".exe"$cPSFullPathFile))
            nShellExecute:=ShellExecute("open",cPSExecutableFile,cExel2JSONParameters,cPSPathExcelScripts,0)
            lPSExcel2JSON:=(nShellExecute>32)
            if (lPSExcel2JSON)
                lPSExcel2JSON:=.F.
                while (!KillApp())
                    lPSExcel2JSON:=((lPSExcel2JSON).or.(file(cFileOutPut)))
                    if ((lPSExcel2JSON).or.(++nAttempt>nAttempts))
                        exit
                    endif
                    lPSExcel2JSON:=Timer():TimerSleep(1000,nWaits,{||file(cFileOutPut)})
                    if (lPSExcel2JSON)
                        exit
                    endif
                end while
            endif
        else
            cPSPolicy:=" powershell -executionPolicy bypass "
            cPSCommand:="cmd /c"+cPSPolicy+cPSFullPathFile+cExel2JSONParameters
            nWaitRunRet:=WaitRun(cPSCommand,SW_HIDE)
            lPSExcel2JSON:=(nWaitRunRet==0)
        endif
    endif

return(lPSExcel2JSON)

static method CSVFileToJSON(cExcelFile,cJSONFile,bTmpCustomFields,cExcelPathServer,cToken) class Excel2JSON

    local aJSON:=Array(0) as array
    local aHeader as array
    local aDetail as array
    local aTmpCustomFields as array

    local cName as character
    local cLine as character
    local cType as character

    local cSPPDrive,cSPPPath,cSPPFile,cSPPExt as character

    local cExcelFileServer as character

    local jDet as json
    local jContent as json

    local lCSVFileToJSON:=.F. as logical

    local nName,nNames,nATName as numeric

    local oFWFileReader as object

    local xValue as variant

    paramtype 1 var cExcelFile as character
    paramtype 2 var cJSONFile as character
    paramtype 3 var bTmpCustomFields as block optional default {||Array(0)}
    paramtype 4 var cExcelPathServer as character optional default "\tmp\totvs\excel\importar\"
    paramtype 5 var cToken as character optional default ";"

    /* Define os Campos dos Detalhes que irao aparecer na Planilha
        aTmpCustomFields[n][1]=>Nome do Campo
        aTmpCustomFields[n][2]=>TamSX3=>{Size,Dec,Type}
        aTmpCustomFields[n][3]=>Titulo do Campo
        aTmpCustomFields[n][4]=>Picture do Campo
        aTmpCustomFields[n][5]=>Expressao SQL do Campo
    */
    aTmpCustomFields:=Eval(bTmpCustomFields)

    if (!lIsDir(cExcelPathServer))
        dirtools():MakeDir(cExcelPathServer)
    endif

    //Extrai as informacoes de Diretorio
    splitPath(cExcelFile,@cSPPDrive,@cSPPPath,@cSPPFile,@cSPPExt)

    cExcelFileServer:=cExcelPathServer
    cExcelFileServer+=cSPPFile
    cExcelFileServer+=cSPPExt

    lCSVFileToJSON:=CpyT2S(cExcelFile,cExcelPathServer)
    if (!lCSVFileToJSON)
        lCSVFileToJSON:=__CopyFile(cExcelFile,cExcelFileServer)
    endif

    if (lCSVFileToJSON)

        jContent:=JSONObject():New()

        oFWFileReader:=FWFileReader():New(cExcelFileServer)
        oFWFileReader:Open()
        while (oFWFileReader:hasLine())
            cLine:=oFWFileReader:GetLine()
            aHeader:=uf.UFTools():StrTokArray(cLine,cToken)
            nNames:=Len(aHeader)
            while (oFWFileReader:hasLine())
                jDet:=JSONObject():New()
                cLine:=oFWFileReader:GetLine()
                aDetail:=uf.UFTools():StrTokArray(cLine,cToken)
                for nName:=1 to nNames
                    cName:=aHeader[nName]
                    xValue:=aDetail[nName]
                    nATName:=aScan(aTmpCustomFields,{|e|(allTrim(e[3])==allTrim(cName))})
                    if (nATName>=0)
                        cType:=aTmpCustomFields[nATName][2][3]
                        if ((cType=="C").and.("'"==Left(xValue,1)))
                            xValue:=subStr(xValue,2)
                        elseif (cType=="N")
                            xValue:=val(xValue)
                        endif
                    endif
                    jDet[cName]:=xValue
                next nName
                aAdd(aJSON,jDet)
            end while
        end while
        oFWFileReader:Close()
        FreeObj(oFWFileReader)

        jContent:Set(aJSON)

        lCSVFileToJSON:=MemoWrite(cJSONFile,jContent:ToJSON())

    endif

    if (!Empty(cExcelFileServer).and.File(cExcelFileServer))
        fErase(cExcelFileServer)
    endif

    FreeObj(@jDet)
    FreeObj(@jContent)

    FWFreeArray(@aJSON)
    FWFreeArray(@aHeader)
    FWFreeArray(@aDetail)
    FWFreeArray(@aTmpCustomFields)

return(lCSVFileToJSON)
